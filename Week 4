Date: 18/03/2025(Tuesday)starts
/// Single linkedlist code.
class Main { // Single linked list.
    public class Node {
        int data;
        Node next;

        public Node(int data) { // First constructor
            this.data = data;
            this.next = null;
        }

        public Node(int data, Node next) { // Second constructor
            this.data = data;
            this.next = next;
        }
    }

    public static void main(String[] args) {
        Main mainObj = new Main(); // Create an instance to access Node class
        Node head = mainObj.new Node(1);
        Node second = mainObj.new Node(2);
        Node third = mainObj.new Node(3);
        
        head.next = second;
        second.next = third;

        while (head != null) { // Fixed "While" to "while"
            System.out.print(head.data + " "); // Corrected access to `data`
            head = head.next;
        }
    }
}

code2: for single linked list
class Main {// Single linked list.
    public static class Node{
        int data;
        Node next;
        public Node(int data){//First constructor
            this.data = data;
            this.next = null;
        }
        public Node(int data, Node next){//second constructor
            this.data = data;
            this.next = next;
        }
    }
    
    public static void main(String[] args) {
        Node head = new Node(1);
        Node second = new Node(2);
        Node third = new Node(3);
        head.next =second;
        second.next=third;

        
        Node temp = head;
        while(temp != null){
            System.out.print(temp.data+" ");
            temp = temp.next;
        }
    }
}


code 3:
class Main {// Single linked list.
    public static class Node{
        int data;
        Node next;
        public Node(int data){//First constructor
            this.data = data;
            this.next = null;
        }
        public Node(int data, Node next){//second constructor
            this.data = data;
            this.next = next;
        }
    }
    public static class LinkedList{
        Node head;
        Node tail;
        int size;
        
        public LinkedList(){
            head = null;
            tail =null;
            size =0;
            
            
        }

        void addAtLast(int val){
            Node node = new Node(val);
            if(size == 0){//case 1.
                head =node;
                tail =node;
            }
            else{//case 2
                
                tail.next = node;
                tail = node;
            }
            size++;
        }
        void printLinkedList(){
            if(size == 0){
                System.out.println("nothing in linkedlist");
            }else{
                Node temp =head;
                while(temp != null){
                    System.out.println(temp.data+" ");
                  temp = temp.next;  
                }
                
            }
        }
        
    }
    public static void main(String[] args) {
        LinkedList ll =new LinkedList();
        ll.addAtLast(3);
        ll.addAtLast(7);
        ll.addAtLast(4);
        //if we donot call the addAtLast function or method then out put is "nothing in linkedlist"
        ll.printLinkedList();
    }
}
output
3 
7 
4


code 4: using front and last
class Main {// Single linked list.
    public static class Node{
        int data;
        Node next;
        public Node(int data){//First constructor
            this.data = data;
            this.next = null;
        }
        public Node(int data, Node next){//second constructor
            this.data = data;
            this.next = next;
        }
    }
    public static class LinkedList{
        Node head;
        Node tail;
        int size;
        
        public LinkedList(){
            head = null;
            tail =null;
            size =0;
            
            
        }
        
        void addAtFornt(int val){
            Node node = new Node(val);
            if(size == 0){
                addAtFornt(val);
                
            }else{
                node.next = head;
                head = node;
                
            }
            size++;
        }
        void addAtLast(int val){
            Node node = new Node(val);
            if(size == 0){//case 1.
                head =node;
                tail =node;
            }
            else{//case 2
                
                tail.next = node;
                tail = node;
            }
            size++;
        }
        void printLinkedList(){
            if(size == 0){
                System.out.println("nothing in linkedlist");
            }else{
                Node temp =head;
                while(temp != null){
                    System.out.println(temp.data+" ");
                  temp = temp.next;  
                }
                
            }
        }
        
    }
    public static void main(String[] args) {
        LinkedList ll =new LinkedList();
        ll.addAtLast(3);
        ll.addAtLast(7);
        ll.addAtLast(4);
        ll.addAtFornt(1);
        //if we donot call the addAtLast function or method then out put is "nothing in linkedlist"
        ll.printLinkedList();
    }
}

Insert a element in single LinkedList
code 1: incomplete

// Online Java Compiler
// Use this editor to write, compile and run your Java code online

class Main {// Single linked list.
    public static class Node{
        int data;
        Node next;
        public Node(int data){//First constructor
            this.data = data;
            this.next = null;
        }
        public Node(int data, Node next){//second constructor
            this.data = data;
            this.next = next;
        }
    }
    public static class LinkedList{
        Node head;
        Node tail;
        int size;
        
        public LinkedList(){
            head = null;
            tail =null;
            size =0;
            
            
        }
        
        void addAtFornt(int val){
            Node node = new Node(val);
            if(size == 0){
                addAtFornt(val);
                
            }else{
                node.next = head;
                head = node;
                
            }
            size++;
        }
        void addAtLast(int val){
            Node node = new Node(val);
            if(size == 0){//case 1.
                head =node;
                tail =node;
            }
            else{//case 2
                
                tail.next = node;
                tail = node;
            }
            size++;
        }
        void printLinkedList(){
            if(size == 0){
                System.out.println("nothing in linkedlist");
            }else{
                Node temp =head;
                while(temp != null){
                    System.out.println(temp.data+" ");
                  temp = temp.next;  
                }
                
            }
        }
        void addAtIndex(int val, int index){
            if(index == 0){
                addAtFront(val);
                
            }else if(index == size){
                addAtLast(val);
                
            }else if(index>size){
                System.out.println("index out of size")
            }
            else{//in between start and end
                //logic is pending
                
            }
        }
    }
    public static void main(String[] args) {
        LinkedList ll =new LinkedList();
        ll.addAtLast(3);
        ll.addAtLast(7);
        ll.addAtLast(4);
        ll.addAtFornt(1);
        //if we donot call the addAtLast function or method then out put is "nothing in linkedlist"
        ll.printLinkedList();
    }
}


code 2: implementation

public class SLL{
    public static class Node{
        int data;
        Node next;

        public Node(int data){ // First constructor
            this.data = data;
            this.next = null;
        }
        public Node(int data, Node next){
            this.data = data;
            this.next = next;
        }
    }
    public static class LinkedList{
        Node head;
        Node tail;
        int size;
        
        public LinkedList(){
            head = null;
            tail = null;
            size = 0;
            
        }
        void addAtLast(int val){
            Node node = new Node(val);
            if(size == 0){
                head = node;
                tail = node;
            }else{
                tail.next = node;
                tail = node;
            }
            size++;
        }
        void addAtFront(int val){
            Node node = new Node(val);
            if(size == 0){
                addAtLast(val);
            }else{
                node.next = head;
                head = node;
                size++;
            }
        }
        void printLinkedList(){
            if(size == 0){
                System.out.println("Nothing in the linked list");
            }else{
                Node temp = head;
                while(temp!=null){
                    System.out.print(temp.data + "->");
                    temp = temp.next;
                }
                System.out.println("NULL");
            }
        }
        void addAtIndex(int val, int index){
            if(index == 0){
                addAtFront(val);
            }else if(index == size){
                addAtLast(val);
            }else if(index>size){
                System.out.println("Out of size");
            }else{
                Node prev = null;
                Node curr = head;
                int currentIndex = 0;
                while(currentIndex!=index){
                    prev = curr;
                    curr = curr.next;
                    currentIndex++;
                }
                Node node = new Node(val);
                node.next = curr;
                prev.next = node;
                size++;
            }
        }
        void deleteFront(){
            if(size == 0){
                System.out.println("Nothing to delete");
            }else if(size == 1){
                head = null;
                tail = null;
                size = 0;
            }else{
                head = head.next;
                size--;
            }
        }
        void deleteLast(){
            if(size  == 0){
                System.out.println("Nothing to delete");
            }else if(size == 1){
                head = null;
                tail = null;
                size = 0;
            }else{
                Node temp = head;
                int currentIndex = 0;
                while(currentIndex!=size - 2){
                    temp = temp.next;
                    currentIndex++;
                }
                temp.next = null;
                tail = temp;
                size--;
            }
        }
        void deleteAtIndex(int index){
            if(index<0 || index>=size){
                System.out.println("Nothing to delete");
            }else if(index == 0){
                deleteFront();
            }else if(index == size-1){
                deleteLast();
            }else{
                int currentIndex = 0;
                Node temp = head;
                while(currentIndex != index - 1){
                    temp = temp.next;
                    currentIndex++;
                }
                temp.next = temp.next.next;
                size--;
            }
        }
    }
    public static void main(String[] args){
        LinkedList ll = new LinkedList();
        ll.addAtLast(3);
        ll.addAtLast(5);
        ll.addAtLast(6);
        ll.addAtLast(7);

        ll.printLinkedList();
        ll.deleteAtIndex(2);
        ll.printLinkedList();
        ll.deleteAtIndex(2);
                ll.printLinkedList();
                ll.deleteAtIndex(1);
                  ll.printLinkedList();

        
        
        // ll.printLinkedList();
        // System.out.println(ll.size);

    }
}
////////////////////////////////////////////////

Date: 19/03/2025


1) Linked List Insertion At End
Difficulty: BasicAccuracy: 43.96%Submissions: 331K+Points: 1Average Time: 20m
Given the head of a Singly Linked List and a value x, insert that value x at the end of the LinkedList and return the modified Linked List.

Examples :

Input: LinkedList: 1->2->3->4->5 , x = 6
Output: 1->2->3->4->5->6
Explanation: 

We can see that 6 is inserted at the end of the linkedlist.
/*
class Node{
    int data;
    Node next;

    Node(int x){
        data = x;
        next = null;
    }
}
*/
class Solution {
    // Function to insert a node at the end of the linked list.
    Node insertAtEnd(Node head, int x) {
        Node node = new Node(x);
        if(head == null){
            return node;
        }
        
        // code here
        
        Node temp = head;
        while(temp.next != null ){
            temp=temp.next;
        }
        temp.next = node;
        return head;
        
        
        
    }
}

2) Search In Linked List
Difficulty: BasicAccuracy: 69.95%Submissions: 12K+Points: 1Average Time: 15m
You are given a singly linked list of n elements, and also an element x. You need to find if x is present in the linked list or not. Return true if x is present else returns false. (1 is printed by the driver code if the returned value is true, otherwise 0)

Examples :

Input: LinkedList: 1->2->3->4->5, x = 4
Output: 1
Input: LinkedList: 2->4->6->7->5->1->0, x = 10
Output: 0
// User function Template for Java

/*
class Node
{
    int data;
    Node next;
    Node(int data)
    {
        this.data = data;
        this.next = null;
    }
}
*/

class Get {
    public static boolean searchLinkedList(Node head, int x) {
        // Your code here
        boolean ans = false;
        Node temp = head;
        while(temp.next !=null){
            if(temp.data == x){
                ans = true;
            }
            temp = temp.next;
        }
        return ans;
    }
}

3) Count Linked List Nodes
Difficulty: BasicAccuracy: 85.99%Submissions: 246K+Points: 1Average Time: 15m
Given a singly linked list. The task is to find the length of the linked list, where length is defined as the number of nodes in the linked list.

Examples :

Input: LinkedList : 1->2->3->4->5

Output: 5
Explanation: Count of nodes in the linked list is 5, which is its length.

/*Complete the function below*/
/*
class Node{
    int data;
    Node next;
    Node(int a){  data = a; next = null; }
}*/

class Solution {
    // Function to count nodes of a linked list.
    public int getCount(Node head) {
        
        // code here
        int count =1;
        
        Node temp = head;
        while(temp.next!=null){
            count++;
            temp=temp.next;
        }
        return count;
    }
}


code1: runtime time error



/*
Structure of node class is:
class Node {
    int data;
    Node next;

    public Node(int data){
        this.data = data;
        this.next = null;
    }
}
*/

class Solution {
    public Node insertInMiddle(Node head, int x) {
        // Create a new node with the given value
        Node node = new Node(x);
        
        // Edge case: If the list has only one node, insert the new node after the head
        if (head.next == null) {
            head.next = node;
            return head; // Return updated head
        }

        // Initialize a temporary pointer to count the number of nodes
        Node temp = head;
        int count = 1;

        // Traverse the linked list to count total nodes
        while (temp.next != null) {
            count++;
            temp = temp.next;
        }

        // Calculate middle position (0-based index)
        int mid = count / 2;

        // Initialize another temporary pointer for second traversal
        Node temp1 = head;
        int count1 = 1;

        // Traverse the list to the (mid+1)th position
        while (temp1.next != null) {
            if (count1 == mid + 1) {
                // Insert the new node in the middle
                node.next = temp1.next; // Link new node to the next node
                temp1.next = node;      // Link previous node to new node
                break; // Exit the loop after inserting
            }
            count1++;
            temp1 = temp1.next;
        }

        return head; // Return the head of the updated linked list
    }
}


code 2:

