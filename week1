Date:20/2/2025
1.Prime number check
//Using Scanner 
import java.util.Scanner;
public class Prime {
	
public static void main (String args []){
    Scanner sc = new Scanner(System.in);
    int n =sc.nextInt();
    int count =0;
	for(int i=1;i<=n;i++) {
		if(n%i==0) {
			count++;
		}
	}
	if(count ==2) {
		System.out.println("Yes it is prime");
	}else {
		System.out.println("No it is not prime");
	}	

}
}
2. Fibonacci sequence
import java.util.Scanner;
public class Fabnoi {
	
public static void main (String args []){
    Scanner sc = new Scanner(System.in);
    int n =sc.nextInt();
    int n1 =1;
    int n2 =1;
    
    
    for(int i=0;i<n;i++){
        System.out.println(n1);
        int n3=n1+n2;
        n1=n2;
        n2=n3;
        
        
    }
	

}
}
3.array of numbers if enter values n
public class Num {
	
public static void main (String args []){
    int [] arr= {1,2,4,7,11,6};
    int n =5;
    int sum =0;
    for(int i =0;i<n;i++){
        sum += arr[i];
    }
	System.out.print(sum);

}
}
4. take the input from the user an int n print 5 prime numbers which are greater than n.
import java.util.Scanner;

public class PrimeNumbers {
    // Function to check if a number is prime
    public static boolean isPrime(int num) {
        if (num <= 1) {
            return false;
        }
        for (int i = 2; i <= Math.sqrt(num); i++) {
            if (num % i == 0) {
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Take input from the user
        System.out.print("Enter a number (n): ");
        int n = scanner.nextInt();

        int count = 0; // To count the number of primes found
        int current = n + 1; // Start checking from n + 1

        System.out.println("The first 5 prime numbers greater than " + n + " are:");
        while (count < 5) {
            if (isPrime(current)) {
                System.out.println(current);
                count++;
            }
            current++;
        }

        
    }
}
Or
import java.util.Scanner;
public class Num {
    public static int checkPrime(int n){
        int count =0;
        int prime = 0;
        for(int i=1;i<= n;i++){
            if(n%i==0){
                count++;
            }
        }
        if(count == 2){
            prime = n;
        }
        return prime;
    }
	
public static void main (String args []){
    Scanner sc = new Scanner(System.in);
    
    int num = sc.nextInt();
    int count =0;
    while(count<5){
        int pri = checkPrime(num+1);
        if(pri != 0){
            System.out.println(pri);
            count++;
        }
        num++;
    }
    

}
}
5.Letcode Two sum 
class Solution {
    public int[] twoSum(int[] nums, int target) {
        
        for(int i =0;i<nums.length-1;i++){
            for(int j=i+1; j<nums.length;j++){
                if(nums[i]+nums[j]== target){
                    return new int[] {i,j};
                    
                }
            }
        }
        throw new IllegalArgumentException("No two sum solution");
    }
}
6. //geeks for geeks q. of segrigate 0's and 1's
class Main {
    public static void main(String[] args) {
        int[] arr ={0,1,1,0,1,0,0};
        int count0= 0;
        int count1 =0;
        for(int i=0;i<arr.length;i++){
            if(arr[i]==0){
                count0++;
            }else{
                count1++;
            }
        }
        int index=0;
        for(int i=0;i<count0;i++){
            arr[index++]=0;
        }
        for(int i=0;i<count1;i++){
            arr[index++]=1;
        }
      for(int i: arr){
          System.out.print(i);
      }  
        
    }
}
7. Three Twin Primes after the n number n is user input?
import java.util.Scanner;

public class TwinPrimes {
    
    public static boolean isPrime(int num) {
        if (num <= 1) {
            return false;
        }
        for (int i = 2; i <= Math.sqrt(num); i++) {
            if (num % i == 0) {
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        
        
        int n = sc.nextInt();

        int count = 0; 
        int current = n + 1; 

        
        while (count < 3) {
            
            if (isPrime(current) && isPrime(current + 2)) {
                System.out.println("(" + current + ", " + (current + 2) + ")");
                count++;
            }
            current++; 
        }

        
    }
}
Date:24/02/2025.
// find the max element in an array
//find the min in an array
//find the sum of the array
//find the mean/avg of the array
// sort 0's and 1's without using sort function
1.class Main {
    public static void main(String[] args) {
        int[] arr ={12,3,5,25,7,8,0};
        int max = arr[0];
        for(int i=1; i<arr.length;i++){
            if(arr[i]>max){
                max=arr[i];
            }
        }
        System.out.print(max);
    }
}
2.class Main {
    public static void main(String[] args) {
        int[] arr ={12,3,5,25,7,8,0};
        int min = arr[0];
        for(int i=1; i<arr.length;i++){
            if(arr[i]<min){
                min=arr[i];
            }
        }
        System.out.print(min);
    }
}
3.class Main {
    public static void main(String[] args) {
        int[] arr ={12,3,5,25,7,8,0};
        int sum = 0;
        for(int i=0; i<arr.length;i++){
            sum += arr[i];
        }
        System.out.print(sum);
    }
}
4.class Main {
    public static void main(String[] args) {
        int[] arr ={12,3,5,25,7,8,0};
        int sum = 0;
        for(int i=0; i<arr.length;i++){
            sum += arr[i];
        }
        System.out.println(arr.length);
        System.out.print(sum/arr.length);
    }
}
5.class Main {
    public static void main(String[] args) {
        int[] arr ={1,1,0,1,1,0,0};
        int count0 = 0;
        int count1 =0;
        for(int i=0; i<arr.length;i++){
            if(arr[i]==0){
                count0++;
            }else{
                count1++;
            }
        }
        int index =0;
        for(int i=0;i<count0;i++){
            arr[index++]=0;
        }
        for(int i=0;i<count1;i++){
            arr[index++]=1;
        }
        for(int i=0;i<arr.length;i++){
            System.out.print(arr[i]);
        }
       
    }
}
//revese an array
//check if array is sorted or not
//second largest element in an array.
6.class Main {
    public static void main(String[] args) {
        int[] arr ={12,3,5,25,7,8,0};
        System.out.println(arr.length);
        int n = arr.length;
        
        for(int i=n-1;i>=0;i--){
            System.out.print(arr[i]+ " ");
        }
       
    }
}
7.class Main {
    public static void main(String[] args) {
        int[] arr ={12,3,5,25,7,8,0};
        boolean sort = true;
        for(int i=0;i<arr.length-1;i++){
            int a=arr[i];
            int b= arr[i+1];
            if(a > b){
                sort = false;
            }
        }
       System.out.print(sort);
    }
}
8.second largest:
9.//Min Max sum in gfg
https://www.geeksforgeeks.org/problems/find-minimum-and-maximum-element-in-an-array4428/1

class Solution {
    public Pair<Integer, Integer> getMinMax(int[] arr) {
        // Code Here
        

        int min = arr[0];
        int max = arr[0];

        // Traverse the array and update min and max
        for (int num : arr) {
            if (num < min) {
                min = num;
            }
            if (num > max) {
                max = num;
            }
        }  return new Pair<>(min, max);

    }
}
// Given a unsorted array of size n
268. Missing Number
Solved

Easy

Topics

Companies
Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.
 
Example 1:
Input: nums = [3,0,1]
Output: 2
Explanation:
n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.
Example 2:
Input: nums = [0,1]
Output: 2
Explanation:
n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.
Example 3:
Input: nums = [9,6,4,2,3,5,7,0,1]
Output: 8
Explanation:
n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.
//code 1 sum way:-
class Solution {
    public int missingNumber(int[] nums) {
        int sum =0;
        int n=nums.length;
        for(int i=0;i<nums.length;i++){
            sum += nums[i];
        }
        int sumnn = (n*(n+1))/2;
        int miss =sumnn-sum;
        return miss;
    }
}
//brute force,index,sum,xor total 4 ways are there to 
————————————————————————————
Date:25/2/2025
485. Max Consecutive Ones
Solved

Easy

Topics

Companies

Hint
Given a binary array nums, return the maximum number of consecutive 1's in the array.
 
Example 1:
Input: nums = [1,1,0,1,1,1]
Output: 3
Explanation: The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.
Example 2:
Input: nums = [1,0,1,1,0,1]
Output: 2
 
Constraints:
* 1 <= nums.length <= 105
* nums[i] is either 0 or 1.
Code1: brute force ,max function
class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        int current_streak=0;
        int max_streak=0;
        for(int i=0;i<nums.length;i++){
            if(nums[i]==1){
                current_streak++;
            }else{
                max_streak = Math.max(current_streak,max_streak);
                current_streak =0;
            }
            max_streak =Math.max(current_streak,max_streak);
        }
        return max_streak;
    }
}

283. Move Zeroes
Solved

Easy

Topics

Companies

Hint
Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.
Note that you must do this in-place without making a copy of the array.
 
Example 1:
Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]
Example 2:
Input: nums = [0]
Output: [0]
 
Constraints:
* 1 <= nums.length <= 104
* -231 <= nums[i] <= 231 - 1

Code 1: Brute force time com
class Solution {
    public void moveZeroes(int[] nums) {
        for(int i =0; i<nums.length;i++){
            for(int j=i+1;j<nums.length;j++){
                if(nums[i]==0){
                    int temp = nums[i];
                    nums[i]=nums[j];
                    nums[j]=temp;
                }
            }
        }
        for(int num :nums){
            System.out.print(num);
        }
    }
}
Code 2:


//1.Max consecutive ones
2.move zeros
3.Buy& sell stock
4.Rotate array k-times.
5.sort 0 and 1.(Swap Approach).
Leetcode 55
Leetcode 78
Leetcode 324 Wiggle sort ii
Leetcode 1299 
Leet code 560
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
Date 27/02/2025
-> Print all subarrays ond there sum of any given array
Agenda -1
1. Kadan’s Algorithm
2. Strings
3.
// 1. Code for printing subarray
class Main {
    
    
    public static void main(String[] args) {
        int[] arr ={1,2,3,4};
        for(int i=0;i<arr.length;i++){
            for(int j =i;j<arr.length;j++){
                
                for(int k=i;k<=j;k++){
                    System.out.print(arr[k]+" ");
                    
                }
                System.out.println();
            }
            
        }  
    }
}
1 
1 2 
1 2 3 
1 2 3 4 
2 
2 3 
2 3 4 
3 
3 4 
4 
Now both sugary and sum
class Main {
    public static int subarraprint(int [] arr,int i,int j ){
        int sum =0;
        for(int k=i;k<=j;k++){
            System.out.print(arr[k]+" ");
            sum+=arr[k];
        }
        return sum;
    }
    public static void main(String[] args) {
        int[] arr ={1,2,3,4};
        for(int i=0;i<arr.length;i++){
            for(int j =i;j<arr.length;j++){
                int ans= subarraprint(arr,i,j);
                
                System.out.println("->"+ans);
            }
            
        }  
    }
}
1 ->1
1 2 ->3
1 2 3 ->6
1 2 3 4 ->10
2 ->2
2 3 ->5
2 3 4 ->9
3 ->3
3 4 ->7
4 ->4
Print all subarrays ond there sum of any given array and there maximum sum
Code 1: using two for loops and one function to print elements and there sum it is brute force 
class Main {
    public static int subarraprint(int [] arr,int i,int j ){
        int sum =0;// here inistating the sum variable.
        for(int k=i;k<=j;k++){//now here the start element to- end element
            System.out.print(arr[k]+" ");//here we are printing element
            sum+=arr[k];//here there sum is storing
        }
        return sum;// this subarraprint function return the sum of the elements
    }
    public static void main(String[] args) {
        int[] arr ={10,-3,-5,-2,8,2,1};
        int maxSum =0;
        for(int i=0;i<arr.length;i++){// here i starting index
            for(int j =i;j<arr.length;j++){// here j is ending index where we want values.
                int ans= subarraprint(arr,i,j);// here it is goto to function 
        
                System.out.println("->"+ans);//it prints the sum of elements which is returning in the subarraprint function.
                maxSum= Math.max(maxSum,ans);// updating the max value in maxsum.
            }
            
            
        }  
        
        System.out.println(maxSum);// the maximum of the given array is 11 it is prints here.
    }
}
10 ->10
10 -3 ->7
10 -3 -5 ->2
10 -3 -5 -2 ->0
10 -3 -5 -2 8 ->8
10 -3 -5 -2 8 2 ->10
10 -3 -5 -2 8 2 1 ->11
-3 ->-3
-3 -5 ->-8
-3 -5 -2 ->-10
-3 -5 -2 8 ->-2
-3 -5 -2 8 2 ->0
-3 -5 -2 8 2 1 ->1
-5 ->-5
-5 -2 ->-7
-5 -2 8 ->1
-5 -2 8 2 ->3
-5 -2 8 2 1 ->4
-2 ->-2
-2 8 ->6
-2 8 2 ->8
-2 8 2 1 ->9
8 ->8
8 2 ->10
8 2 1 ->11
2 ->2
2 1 ->3
1 ->1
11
///// if we want to find the sum of array in optimised way using subarray concept then we want to use Kudan”s Algorithm.
Leetcode 53.
53. Maximum Subarray
Solved

Medium

Topics

Companies
Given an integer array nums, find the subarray with the largest sum, and return its sum.
 
Example 1:
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.
Example 2:
Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.
Example 3:

class Solution {
    public int maxSubArray(int[] nums) {
        int currentsum = 0;
        int maxSum= Integer.MIN_VALUE;
        for(int i =0;i<nums.length;i++){
            currentsum += nums[i];
            maxSum = Math.max(maxSum,currentsum);
            if(currentsum <0){
                currentsum =0;
                
            } 

        }
        
        return maxSum;
    }
}

Leetcode 1749//HOME WORK
1749. Maximum Absolute Sum of Any Subarray
Solved

Medium

Topics

Companies

Hint
You are given an integer array nums. The absolute sum of a subarray [numsl, numsl+1, ..., numsr-1, numsr] is abs(numsl + numsl+1 + ... + numsr-1 + numsr).
Return the maximum absolute sum of any (possibly empty) subarray of nums.
Note that abs(x) is defined as follows:
* If x is a negative integer, then abs(x) = -x.
* If x is a non-negative integer, then abs(x) = x.
 
Example 1:
Input: nums = [1,-3,2,3,-4]
Output: 5
Explanation: The subarray [2,3] has absolute sum = abs(2+3) = abs(5) = 5.
Example 2:
Input: nums = [2,-5,1,-4,3,-2]
Output: 8
Explanation: The subarray [-5,1,-4] has absolute sum = abs(-5+1-4) = abs(-8) = 8.

class Solution {
    public int maxAbsoluteSum(int[] nums) {
        int currsum1 =0;
        int currsum2 =0;
        int maxsum = Integer.MIN_VALUE;
        int minsum = Integer.MAX_VALUE;
        for(int i=0;i<nums.length;i++){
            currsum1 += nums[i];
            currsum2 += nums[i];
            maxsum= Math.max(currsum1,maxsum);
            minsum=Math.min(currsum2,minsum);
            if(currsum1<0){
                currsum1 =0;
            }
            if(currsum2>0){
                currsum2 =0;
            }
            maxsum=Math.max(maxsum,Math.abs(minsum));
        }
        return maxsum;
    }
}

Leetcode 1137
1137. N-th Tribonacci Number
Solved

Easy

Topics

Companies

Hint
The Tribonacci sequence Tn is defined as follows: 
T0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0.
Given n, return the value of Tn.
 
Example 1:
Input: n = 4
Output: 4
Explanation:
T_3 = 0 + 1 + 1 = 2
T_4 = 1 + 1 + 2 = 4
Example 2:
Input: n = 25
Output: 1389537
 
Code 1: using while loop
class Solution {
    public int tribonacci(int n) {
        int t0=0;
        int t1=1;
        int t2=1;
        int t3=0;
        int i=2;
        if(n <=0){
        t3= 0;
        }else if (n==1||n==2){
            t3=1;
            }else if(n>2){
            while(i<n){
                t3=t0+t1+t2;
                t0=t1;
                t1=t2;
                t2=t3;
                i++;
            }
        }
        return t3;
    }
}
Code 2: using for loop
class Solution {
    public int tribonacci(int n) {
        int t0=0;
        int t1=1;
        int t2=1;
        int t3=0;
        
        if(n <=0){
        t3= 0;
        }else if (n==1||n==2){
            t3=1;
            }
        for(int i=2;i<n;i++){
            t3=t0+t1+t2;
            t0=t1;
            t1=t2;
            t2=t3;
        }    
        return t3;
    }
}

// Find Third largest element in an array
//leap year using Ternary operators
// Array Rotation?
//leetcode 189
/////////////////////////////////////////////////////////////////////////
Date : 28/02/2025
// Print all factors of number
// gcd of two numbers
//gcd and lcm of array 
->Using Recuurision 
->Using iteration
Leetcode 1979
//GCD & LCM of array
// kmp algorithm
//rabin-karp algorithm
// Leetcode 66.
// Leetcode 1006.
66. Plus One
Solved

Easy

Topics

Companies
You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.
Increment the large integer by one and return the resulting array of digits.
 
Example 1:
Input: digits = [1,2,3]
Output: [1,2,4]
Explanation: The array represents the integer 123.
Incrementing by one gives 123 + 1 = 124.
Thus, the result should be [1,2,4].

class Solution {
    public int[] plusOne(int[] digits) {
        int n = digits.length;
        // if(n== 1){
        //     digits[n+1] = 1; 
        // }
        for(int i=n-1; i>=0;i--){
            if(digits[i]<9){
                digits[i]= digits[i]+1;
            return digits;
            }
            digits[i]=0;
        }
        int [] result = new int[n+1];
        result[0]=1; 
        return result;
    }
}


1006. Clumsy Factorial
The factorial of a positive integer n is the product of all positive integers less than or equal to n.
* For example, factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1.
Code 1: time limit exceed in leetcode but work fine
class Solution {
    public int value(int a,int b,int c,int d){
        int val = a*b/c+d;
        return val;
    }
    public int clumsy(int n) {
        int ans = 0;
        int c =0;
        for(int i=1;i<=4;i--){
            if(i%4==0){
                int clum = value(i,i-1,i-2,i-3); 
                ans=clum;
                
            }
        }
        for(int i=5;i>0;i--){
            if(i%4==0){
                int clum = value(i,i-1,i-2,i-3); 
                c= clum;
                
            }
            ans =ans-c;
        }
        return ans;
    }
}
Code 2: working in leetcode
class Solution {
    public int clumsy(int n) {
        int ans = 1;
        if(n <= 4){
            if(n <= 2) return n;
            else if(n == 3) return 6;
            else if(n == 4) return 7;
        } else {
            if(n%4 == 1 || n%4 == 2) ans = n+2;
            else if(n%4 == 3) ans = n-1;
            else ans = n+1;
        }
        return ans;
    }
}

//->code for print all elements of a array
class Main {
    public static void main(String[] args) {
        int num =12;
        for(int i=1;i<=num;i++){
            if(num%i==0){
                System.out.print(i+" ");
            }
        }
    }
}
Output:1 2 3 4 6 12 
//->Gcd of two numbers


