Date: 1/04/2025 (Tuesday)


trees Basics
leet code 



code 2:
class Solution {
    List<Integer> result = new ArrayList<>();

    public void helper(TreeNode root){
        if(root == null) return;
        helper(root.left);
        result.add(root.val);
        helper(root.right);
    }
    public List<Integer> inorderTraversal(TreeNode root) {
        helper(root);
        return result;
    }   

}

//////////////////////////////////////////////////////////////////////////////
Date: 2/04/2025




110. Balanced Binary Tree
Solved
Easy
Topics
Companies
Given a binary tree, determine if it is height-balanced.

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: true

code1: 
class Solution {
    public int hight(TreeNode root){
        if(root == null)return 0;
        int c1 = hight(root.left);
        int c2 = hight(root.right);
        return Math.max(c1,c2)+1;
    }
    public boolean isBalanced(TreeNode root) {
        if(root==null){
            return true;
        }
        int lh = hight(root.left);
        int rh = hight(root.right);

        if(Math.abs(lh-rh) <=1 && isBalanced(root.left) && isBalanced(root.right) ){
            return true;
        }
        return false;
    }
}

code 2: // we directly asking what is height and are you balanced at a time
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {// we directly asking what is height and are you balanced at a time

    public class Pair {
        int height;
        boolean balanced;
        
        Pair(int height, boolean balanced) {
            this.height = height;
            this.balanced = balanced;
        }
    }
    
    public Pair helper(TreeNode root) {
        if (root == null) {
            return new Pair(0, true);
        }
        
        Pair left = helper(root.left);
        Pair right = helper(root.right);
        
        boolean isBalanced = left.balanced && right.balanced && Math.abs(left.height - right.height) <= 1;
        int height = Math.max(left.height, right.height) + 1;
        
        return new Pair(height, isBalanced);
    }
    
    public boolean isBalanced(TreeNode root) {
        return helper(root).balanced;
    }
}
