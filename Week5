Date:24/March/2025  (Monday)

206. Reverse Linked List
Solved
Easy
Topics
Companies
Given the head of a singly linked list, reverse the list, and return the reversed list.

 

Example 1:


Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]
Example 2:


Input: head = [1,2]
Output: [2,1]
Example 3:

Input: head = []
Output: []
 

Constraints:

The number of nodes in the list is the range [0, 5000].
-5000 <= Node.val <= 5000
 
code 1:
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseList(ListNode head) {
        if(head == null || head.next == null) return head;

        ListNode prev = null;
        ListNode curr = head;
        ListNode next = null;
        
        while (curr!= null ){
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
            
        }
        return prev ;      
    }
}
code 2:

import java.util.ArrayList;

class Solution {
    public ListNode reverseList(ListNode head) {
        if (head == null || head.next == null) return head;

        ArrayList<ListNode> nodeList = new ArrayList<>();

        // Step 1: Store all nodes in the ArrayList
        ListNode temp = head;
        while (temp != null) {
            nodeList.add(temp);
            temp = temp.next;
        }

        // Step 2: Reverse the links using the ArrayList
        for (int i = nodeList.size() - 1; i > 0; i--) {
            nodeList.get(i).next = nodeList.get(i - 1);
        }

        // Step 3: Set the next of the first node to null (new tail)
        nodeList.get(0).next = null;

        // Return the new head (last element in ArrayList)
        return nodeList.get(nodeList.size() - 1);
    }
}
code 3:
class Solution {
    public ListNode reverseList(ListNode head) {
        // Base case: If the list is empty or has only one node, return it as is
        if (head == null || head.next == null) {
            return head;
        }

        // Initialize three pointers:
        ListNode prev = null;    // Previous node (initially null)
        ListNode curr = head;    // Current node (starting from head)
        ListNode next = head.next; // Next node (storing head.next initially)
        
        // Iterate through the list until next becomes null
        while (next != null) {
            curr.next = prev;  // Reverse the current node's pointer
            prev = curr;       // Move prev forward
            curr = next;       // Move curr forward
            next = next.next;  // Move next forward
        }

        // After the loop, curr is at the last node, so reverse its pointer
        curr.next = prev;

        // Return the new head (which is the last node in the original list)
        return curr;
    }
}


234. Palindrome Linked List
Solved
Easy
Topics
Companies
Given the head of a singly linked list, return true if it is a palindrome or false otherwise.

 

Example 1:


Input: head = [1,2,2,1]
Output: true
Example 2:


Input: head = [1,2]
Output: false
 

code1 : using arraylist and check palindrome

import java.util.ArrayList;

class Solution {
    public boolean isPalindrome(ListNode head) {
        // Step 1: Store all values from the linked list into an ArrayList
        ArrayList<Integer> list = new ArrayList<>();
        ListNode temp = head;
        
        // Traverse the linked list and add values to the ArrayList
        while (temp != null) { 
            list.add(temp.val);
            temp = temp.next;
        }

        // Step 2: Use two-pointer technique to check if the list is a palindrome
        int low = 0;               // Start pointer (beginning of the list)
        int end = list.size() - 1; // End pointer (end of the list)

        while (low < end) { 
            // Compare elements from start and end
            if (!list.get(low).equals(list.get(end))) { // Fix: Use .equals() for Integer comparison
                return false; // If any mismatch is found, it's not a palindrome
            }
            low++;  // Move start pointer forward
            end--;  // Move end pointer backward
        }

        return true; // If all elements matched, the list is a palindrome
    }
}



code 2: using mid reverse and check
class Solution {
    public ListNode reverse(ListNode head) {
        ListNode prev = null;
        ListNode curr = head;
        ListNode next = null; // Fix: next should be null initially to avoid NullPointerException

        while (curr != null) { // Fix: Loop should run while curr is not null
            next = curr.next;  // Store the next node
            curr.next = prev;  // Reverse the current node's pointer
            prev = curr;       // Move prev to curr
            curr = next;       // Move curr to next node
        }
        return prev; // prev is now the head of the reversed list
    }

    public boolean isPalindrome(ListNode head) {
        if (head == null || head.next == null) return true; // Fix: Single node is a palindrome
        // ListNode temp = head;
        // int count =1;
        // while(temp.next != null){
        //     count++;
        //     temp = temp.next;
        // }
        // int mid = count/2;
        ListNode slow = head, fast = head;

        // Step 1: Find the middle of the linked list
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        // Step 2: Reverse the second half of the list
        slow = reverse(slow);

        // Step 3: Compare first half with the reversed second half
        ListNode temp = head;
        // ListNode secondHalf = slow;

        while (slow != null ) { // Fix: Compare until secondHalf is null
            if (temp.val != slow.val) {
                return false;
            }
            temp = temp.next;
            slow = slow.next;
        }


        return true;
    }
}

///////////////////////////////////////////////
Date: 25/03/2024

// reverse a double linked list,
 //leetcode 2816
 //copy list with random pointer
 //add 1 to a linked list
//stack


//stack
//Stack using Arraylist
import java.util.*;

class Main {
    class Stack {
        ArrayList<Integer> list;

        Stack() { // Constructor
            list = new ArrayList<>();
        }

        public void add(int element) {
            list.add(element);
        }

        public int peek() { // Fixed method name
            if (list.isEmpty()) return -1;
            return list.get(list.size() - 1);
        }

        public int pop() {
            if (list.isEmpty()) return -1;
            int element = this.peek();
            list.remove(list.size() - 1);
            return element;
        }

        public int getSize() { // Fixed missing return
            return list.size();
        }
    }

    public static void main(String[] args) {
        Main mainInstance = new Main(); // Create an instance of Main
        Stack s = mainInstance.new Stack(); // Instantiate inner class

        s.add(1);
        s.add(12);
        s.add(21);
        s.add(22);
        s.add(23);

        System.out.println(s.peek()); // Output: 23
        System.out.println(s.pop());  // Output: 23
        System.out.println(s.getSize()); // Output: 4
    }
}


//Stack using Linkedlist (Hint: add at the front not backside)?
////Stack using Sinngle Linkedlist
import java.util.*;

class Main {
    class Stack {
        LinkedList<Integer> list;

        Stack() { // Constructor
            list = new LinkedList<>();
        }

        public void add(int element) {
            list.addFirst(element);
        }

        public int peek() { // Fixed method name
            if (list.isEmpty()) return -1;
            return list.peekFirst();
        }

        public int pop() {
            if (list.isEmpty()) return -1;
            int element = this.peek();
            list.remove();
            return element;
        }

        public int getSize() { // Fixed missing return
            return list.size();
        }
    }

    public static void main(String[] args) {
        Main mainInstance = new Main(); // Create an instance of Main
        Stack s = mainInstance.new Stack(); // Instantiate inner class

        s.add(1);
        s.add(12);
        s.add(21);
        s.add(22);
        s.add(23);

        System.out.println(s.peek()); // Output: 23
        System.out.println(s.pop());  // Output: 23
        System.out.println(s.getSize()); // Output: 4
        System.out.println(s.peek());
    }
}


2816. Double a Number Represented as a Linked List
Solved
Medium
Topics
Companies
Hint
You are given the head of a non-empty linked list representing a non-negative integer without leading zeroes.

Return the head of the linked list after doubling it.

 

Example 1:


Input: head = [1,8,9]
Output: [3,7,8]
Explanation: The figure above corresponds to the given linked list which represents the number 189. Hence, the returned linked list represents the number 189 * 2 = 378.
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode doubleIt(ListNode head) {
        // Reverse the linked list to process from least significant digit
        head = reverse(head);
        
        ListNode temp = head;
        ListNode prev = null;
        int carry = 0;
        
        while (temp != null) {
            int newVal = temp.val * 2 + carry;
            temp.val = newVal % 10;
            carry = newVal / 10;
            
            prev = temp;
            temp = temp.next;
        }
        
        // If there is a carry left, add a new node
        if (carry > 0) {
            prev.next = new ListNode(carry);
        }
        
        // Reverse the list back to original order
        return reverse(head);
    }
    
    private ListNode reverse(ListNode head) {
        ListNode prev = null;
        ListNode curr = head;
        while (curr != null) {
            ListNode nextNode = curr.next;
            curr.next = prev;
            prev = curr;
            curr = nextNode;
        }
        return prev;
    }
}
////////////////////////////////////////////////////////////
Date: 26/03/2025

LC 402. Remove K Digits
hwLC 503. 
hwLC 907.// next smaller and prev smaller.
hwLC 735// Astriod collision
hwStock span problem


Leetcode 402
402. Remove K Digits
Solved
Medium
Topics
Companies
Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.

 

Example 1:

Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.
Example 2:

Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.
class Solution {
    public String removeKdigits(String num, int k) {
        if(k== num.length()){
            return "0";
        }
        Stack <Character> s= new Stack<>();
        for(int i=0; i<num.length();i++){
            char c= num.charAt(i);
            while(!s.isEmpty() && k>0 && s.peek()>c){
                s.pop();
                k--;

            }
            s.push(c);
        }
        while(! s.isEmpty() && k>0){// for k>0 and stack is sorted. 
            s.pop();
            k--;
        }
        StringBuilder result = new StringBuilder();
        while(!s.isEmpty()){
            result.append(s.pop());
        }//if we use this we want to use reverse because the string save the elements from top using pop so .
        // //
        // for(char ch :s){
        //     sb.append(ch);
        // } when for loop is used stack is take element from down. so reverse is not requiored.
        result.reverse();
        while(result.length()>0 && result.charAt(0)=='0'){//edge case if 000123 then remove 123.
            result.deleteCharAt(0);
        }
        return result.length() == 0 ? "0": result.toString();


    }
}


735. Asteroid Collision
Solved
Medium
Topics
Companies
Hint
We are given an array asteroids of integers representing asteroids in a row. The indices of the asteriod in the array represent their relative position in space.

For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.

Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.

 

Example 1:

Input: asteroids = [5,10,-5]
Output: [5,10]
Explanation: The 10 and -5 collide resulting in 10. The 5 and 10 never collide.



class Solution {
    public int[] asteroidCollision(int[] asteroids) {
        Stack<Integer> st = new Stack<>();
        
        for (int num : asteroids) {
            boolean destroyed = false;
            
            // Collision occurs only when we have positive asteroid on stack and current one is negative
            while (!st.isEmpty() && num < 0 && st.peek() > 0) {
                if (Math.abs(num) > st.peek()) {
                    st.pop(); // Current asteroid destroys the top
                    continue;
                } else if (Math.abs(num) == st.peek()) {
                    st.pop(); // Both asteroids destroy each other
                }
                destroyed = true; // Current asteroid is destroyed
                break;
            }
            
            // If the current asteroid is not destroyed, push it
            if (!destroyed) {
                st.push(num);
            }
        }
        
        // Convert stack to array
        int[] ans = new int[st.size()];
        for (int i = st.size() - 1; i >= 0; i--) {
            ans[i] = st.pop();
        }
        return ans;
    }
}
503. Next Greater Element II
Solved
Medium
Topics
Companies
Given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.

The next greater number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, return -1 for this number.

 

Example 1:

Input: nums = [1,2,1]
Output: [2,-1,2]
Explanation: The first 1's next greater number is 2; 
The number 2 can't find next greater number. 
The second 1's next greater number needs to search circularly, which is also 2.
Example 2:

Input: nums = [1,2,3,4,3]
Output: [2,3,4,-1,4]


class Solution {
    public int[] nextGreaterElements(int[] nums) {
        int n = nums.length;
        int[] result = new int[n];
        Arrays.fill(result, -1); // Default to -1 if no greater element exists
        Stack<Integer> stack = new Stack<>();
        
        // Traverse the array twice to handle the circular nature
        for (int i = 0; i < 2 * n; i++) {
            int num = nums[i % n]; // Circular index
            
            // Find next greater element for stack elements
            while (!stack.isEmpty() && nums[stack.peek()] < num) {
                result[stack.pop()] = num;
            }
            
            // Push only in first pass (avoid duplicates)
            if (i < n) {
                stack.push(i);
            }
        }
        
        return result;
    }
}

/////////////////////////////////////////////////////////////////////////
Date: 27/march/2025

Leetcode 
//739,735,540,32
Queue
hw Leetcode 84. largest rectangle in a histogram 
// implementation of stack using queue and vise-versa?

739. Daily Temperatures
Solved
Medium
Topics
Companies
Hint
Given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 instead.

 

Example 1:

Input: temperatures = [73,74,75,71,69,72,76,73]
Output: [1,1,4,2,1,1,0,0]
Example 2:

Input: temperatures = [30,40,50,60]
Output: [1,1,1,0]

code 1: runtime error but code is correct.
class Solution {
    public int[] dailyTemperatures(int[] temperatures) {
        int n = temperatures.length;
        int[] result = new int[n]; // Array to store the answer

        for (int i = 0; i < n; i++) {
            int num = temperatures[i];
            int j = i + 1;
            int count = 0;
            
            while (j < n) {
                count++; // Counting days
                if (num < temperatures[j]) {
                    result[i] = count; // Store the number of days
                    break;
                }
                j++; // Move to the next day
            }
        }

        return result;
    }
}

code 2: Run in leetcode

class Solution {
class Solution {
    public int[] dailyTemperatures(int[] temperatures) {
        Stack<Integer> index_st = new Stack<>(); // Stack to store indices of temperature values
        int[] ans = new int[temperatures.length]; // Array to store the result (days to wait for a warmer temperature)
        
        // Iterate through the temperatures array
        for (int i = 0; i < temperatures.length; i++) {
            // While stack is not empty and the current temperature is greater than the temperature at the index stored at the top of the stack
            while (!index_st.isEmpty() && temperatures[index_st.peek()] < temperatures[i]) {
                ans[index_st.peek()] = i - index_st.peek(); // Calculate the days to wait for a warmer temperature
                index_st.pop(); // Remove the processed index from the stack
            }
            index_st.push(i); // Push the current index onto the stack
        }
        
        return ans; // Return the final answer array
    }
}


540. Single Element in a Sorted Array
Solved
Medium
Topics
Companies
You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.

Return the single element that appears only once.

Your solution must run in O(log n) time and O(1) space.

 

Example 1:

Input: nums = [1,1,2,3,3,4,4,8,8]
Output: 2
Example 2:

Input: nums = [3,3,7,7,10,11,11]
Output: 10

code 1:
class Solution {
    public int singleNonDuplicate(int[] nums) {
        // If there is only one element, return it as the answer.
        if(nums.length == 1){
            return nums[0];
        }

        int low = 0;
        int high = nums.length - 1;

        // Check if the first element is the unique one.
        if(nums[low] != nums[low + 1]){
            return nums[low];
        }
        
        // Check if the last element is the unique one.
        if(nums[high] != nums[high - 1]){
            return nums[high];
        }

        // Binary search for the single non-duplicate element.
        while(low <= high){
            int mid = (low + high) / 2;

            // If mid is part of a pair (nums[mid] == nums[mid+1])
            if(nums[mid] == nums[mid + 1]){
                // If mid is an odd index, move left (reduce high)
                if(mid % 2 == 1){
                    high = mid - 1;
                }
                // If mid is even, move right (increase low)
                else{
                    low = mid + 1;
                }
            }
            // If mid is part of a pair but with the previous element (nums[mid] == nums[mid-1])
            else if(nums[mid] == nums[mid - 1]){
                // If (mid-1) is even, move right (increase low)
                if((mid - 1) % 2 == 0){
                    low = mid + 1;
                }
                // If (mid-1) is odd, move left (reduce high)
                else{
                    high = mid - 1;
                }
            }
            // If mid is not part of any pair, it's the unique element.
            else{
                return nums[mid];
            }
        }

        // Return -1 if no unique element is found (this should never be reached if input is valid)
        return -1;
    }
}


32. Longest Valid Parentheses
Solved
Hard
Topics
Companies
Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses substring.

 

Example 1:

Input: s = "(()"
Output: 2
Explanation: The longest valid parentheses substring is "()".
Example 2:

Input: s = ")()())"
Output: 4
Explanation: The longest valid parentheses substring is "()()".

class Solution {
    public int longestValidParentheses(String s) {
        if (s.length() == 0) return 0;
        
        Stack<Integer> st = new Stack<>();  // Use stack to store indices
        st.push(-1); // Base index to handle cases like "()()"
        
        int maxLen = 0;

        for (int i = 0; i < s.length(); i++) { // Iterate till s.length()
            if (s.charAt(i) == '(') {
                st.push(i); // Push index of '('
            } else { // When `s.charAt(i) == ')'`
                st.pop(); // Pop previous '(' index
                
                if (!st.isEmpty()) {
                    maxLen = Math.max(maxLen, i - st.peek()); // Update max length
                } else {
                    st.push(i); // Push invalid ')' index as base
                }
            }
        }
        
        return maxLen;
    }
}

/////Queue 

// Implementation of queue using Arraylist
import java.util.*;
class Main {
    static class Queue{
        ArrayList<Integer> Qlist;
        Queue(){
            Qlist = new ArrayList<>();
        }
        void enqueue(int element){
            Qlist.add(element);
        }
        int peek(){
            if(Qlist.isEmpty())return -1;
            return Qlist.get(0);
            
        }
        int dequeue(){
            if(Qlist.isEmpty()) return -1;
            int ele =Qlist.get(0);
            Qlist.remove(0);
            return ele;
        }
        int getSize(){
            if(Qlist.isEmpty())return 0;
            return Qlist.size();
        }
        
    }
    public static void main(String[] args) {
        Queue q = new Queue();
        q.enqueue(10);
        q.enqueue(120);
        q.enqueue(103);
        q.enqueue(105);
        q.enqueue(109);
        
        System.out.println(q.peek());
        System.out.println(q.dequeue());
        System.out.println(q.dequeue());
        System.out.println(q.dequeue());
        System.out.println(q.dequeue());
        System.out.println(q.dequeue());
        System.out.println(q.getSize());
        
    }
}


// implementation pf queue using Linkedlist
import java.util.*;
class Main {
    static class Queue{
        LinkedList<Integer> Qlist;
        Queue(){
            Qlist = new LinkedList<>();
        }
        void enqueue(int element){
            Qlist.addFirst(element);
        }
        int peek(){
            if(Qlist.isEmpty())return -1;
            return Qlist.peekLast();
            
        }
        int dequeue(){
            if(Qlist.isEmpty()) return -1;
            int ele =this.peek();
            Qlist.removeLast();
            return ele;
        }
        int getSize(){
            if(Qlist.isEmpty())return 0;
            return Qlist.size();
        }
        
    }
    public static void main(String[] args) {
        Queue q = new Queue();
        q.enqueue(10);
        q.enqueue(120);
        q.enqueue(103);
        q.enqueue(105);
        q.enqueue(109);
        
        System.out.println(q.peek());
        System.out.println(q.dequeue());
        System.out.println(q.dequeue());
        System.out.println(q.dequeue());
        System.out.println(q.dequeue());
        System.out.println(q.dequeue());
        System.out.println(q.getSize());
        
    }
}


///////////////////////////////////////////////////////

Date : 28/march/2025

160. Intersection of Two Linked Lists
Solved
Easy
Topics
Companies
Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.

For example, the following two linked lists begin to intersect at node c1:


The test cases are generated such that there are no cycles anywhere in the entire linked structure.

Note that the linked lists must retain their original structure after the function returns.

Custom Judge:

The inputs to the judge are given as follows (your program is not given these inputs):

intersectVal - The value of the node where the intersection occurs. This is 0 if there is no intersected node.
listA - The first linked list.
listB - The second linked list.
skipA - The number of nodes to skip ahead in listA (starting from the head) to get to the intersected node.
skipB - The number of nodes to skip ahead in listB (starting from the head) to get to the intersected node.
The judge will then create the linked structure based on these inputs and pass the two heads, headA and headB to your program. If you correctly return the intersected node, then your solution will be accepted.

 

Example 1:


Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3
Output: Intersected at '8'
Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).
From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.
- Note that the intersected node's value is not 1 because the nodes with value 1 in A and B (2nd node in A and 3rd node in B) are different node references. In other words, they point to two different locations in memory, while the nodes with value 8 in A and B (3rd node in A and 4th node in B) point to the same location in memory.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        int size1 = 1;
        int size2 = 1;
        ListNode temp1 = headA;
        ListNode temp2 = headB;
        while(temp1.next !=null){
            size1++;
            temp1 =temp1.next;
        }
        while(temp2.next !=null){
            size2++;
            temp2 =temp2.next;
        }
        int diff = Math.abs(size1 - size2);
        temp1 = headA;
        temp2 = headB;
        if(size1>size2){
            while(diff > 0 && temp1.next != null){
                temp1 = temp1.next;
                diff--;
            }
        }
        else if (size2> size1){
            while(diff > 0 && temp2.next !=null){
                temp2 = temp2.next;
                diff--;
            }
        }
        while(temp1!= null && temp2!= null){
            if(temp1 == temp2){
                return temp2;
            }
            temp1 = temp1.next;
            temp2 = temp2.next;
        }
        return null;
    }
}
