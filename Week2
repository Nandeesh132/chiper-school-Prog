Date: 3/3/2025..   Monday.
LeetCode 287. Find the Duplicate Number
Attempted

Medium

Topics

Companies
Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.
There is only one repeated number in nums, return this repeated number.
You must solve the problem without modifying the array nums and using only constant extra space.
 
Example 1:
Input: nums = [1,3,4,2,2]
Output: 2
Example 2:
Input: nums = [3,1,3,4,2]
Output: 3
Example 3:
Input: nums = [3,3,3,3,3]
Output: 3
 
Code 1 : brute force not work in leetcode because time limit exceeded
class Solution {
    public int findDuplicate(int[] nums) {
        int n = nums.length;
        for(int i =0;i< n-1;i++){
            for(int j=i+1;j<n;j++){
                if(nums[i]== nums[j]){
                    return nums[i];
                }
            }
        }
        return 0;
    }
}
Code 2: Using HashSet
class Solution {
    public int findDuplicate(int[] nums) {
        int n = nums.length;
       HashSet<Integer> hs=new HashSet <>();
       for(int i =0;i<n;i++){
        int num = nums[i];
        if(!hs.contains(num)){
            hs.add(num);
        }
        else if(hs.contains(num)){
            return num;
        }
       }
        return 0;
    }
}
Code 3: Using HashMap
class Solution {
    public int findDuplicate(int[] nums) {
        int n = nums.length;
       HashMap<Integer,Integer> hs=new HashMap <>();
       for(int i =0;i<n;i++){
        int num = nums[i];
        if(!hs.containsKey(num)){
            hs.put(num,1);
        }
        else if(hs.containsKey(num)){
            return num;
        }
       }
        return 0;
    }
}

Code 4: Brute force Running in Leetcode

242. Valid Anagram
Solved

Easy

Topics

Companies
Given two strings s and t, return true if t is an anagram of s, and false otherwise.
 
Example 1:
Input: s = "anagram", t = "nagaram"
Output: true
Example 2:
Input: s = "rat", t = "car"
Output: false
Code 2: using two frequency arrays
class Solution {
    public boolean isAnagram(String s, String t) {
        boolean ans = true;
        int[] sfreq = new int[26];
        int[] rfreq = new int[26];
        for(int i=0;i<s.length();i++){
            char sc = s.charAt(i);
            int sindex = sc-'a';
            sfreq[sindex]++;
        }
        for(int i =0;i<t.length();i++){
            char rc = t.charAt(i);
            int rindex = rc-'a';
            rfreq[rindex]++;
        }
        for(int i=0;i<sfreq.length;i++){
            if(sfreq[i]!=rfreq[i]){
                ans = false;
            }
        }
        return ans;
    }
}

String Duplicates Removal

https://www.geeksforgeeks.org/problems/remove-all-duplicates-from-a-given-string4321/1?itm_source=geeksforgeeks&itm_medium=article&itm_campaign=practice_card

Difficulty: EasyAccuracy: 58.68%Submissions: 105K+Points: 2Average Time: 15m

Given a string s which may contain lowercase and uppercase characters. The task is to remove all duplicate characters from the string and find the resultant string. The order of remaining characters in the output should be same as in the original string.
Example 1:
Input: s = "geEksforGEeks" Output: "geEksforG" Explanation: After removing duplicate characters such as E, e, k, s, we have string as "geEksforG".
Code 1: using hashes and StringBuilder
class Solution {
    String removeDuplicates(String s) {
        HashSet <Character> hs = new HashSet<>();
        StringBuilder ans = new StringBuilder(); 
        for(int i=0; i<s.length();i++){
            char c = s.charAt(i);
            if(!hs.contains(c)){
                hs.add(c);
                ans.append(c);
            }
            
        }
        String result= ans.toString();
        return result;   
    }
}
Code 2: using frequency array method

class Solution {
    String removeDups(String s) {
        // code here
        int[] freq =new int[256];
        StringBuilder ans = new StringBuilder(); 
        for(int i=0; i<s.length();i++){
            char c = s.charAt(i);
            int index = (int) c;
            freq[index]++;
            if(freq[index]==1){
                ans.append(c);
            }
            
        }
        // String result= ans.toString();
        // return result;
        return ans.toString();
    }
}
// code to remove non alphanumeric vaules from string and converting the string to all lower case.
class Main {
    public static void main(String[] args) {
        String s = "AB!Cba";
        s = s.replaceAll(
          "[^a-zA-z]", "");
        s=s.toLowerCase();
        
        for(int i=0;i<s.length();i++){
            System.out.println(s.charAt(i));
        }
    }
}
LeetCode 125. Valid Palindrome
Easy

Topics

Companies
A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.
Given a string s, return true if it is a palindrome, or false otherwise.
 
Example 1:
Input: s = "A man, a plan, a canal: Panama"
Output: true
Explanation: "amanaplanacanalpanama" is a palindrome.
Code 1:
class Solution {
    public boolean isPalindrome(String s) {
        boolean ans = true;
        s=s.toLowerCase();
        s = s.replaceAll(
          "[^a-z0-9]”, "");
          int n = s.length();
          int i=0;
          int j=n-1;
          while(i<j){
            if(s.charAt(i)!= s.charAt(j)){
                ans =false;
            }
            i++;
            j--;
          }
        return ans;
    }
}
LeetCode 387. First Unique Character in a String
Solved

Easy

Topics

Companies
Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.
 
Example 1:
Input: s = "leetcode"
Output: 0
Explanation:
The character 'l' at index 0 is the first character that does not occur at any other index.
Example 2:
Input: s = "loveleetcode"
Output: 2

Code1: Using HashMap
class Solution {
    public int firstUniqChar(String s) {
        HashMap <Character,Integer> hs =new HashMap<>();
        for(int i =0; i<s.length();i++){
            char a =s.charAt(i);
            hs.put(a,hs.getOrDefault(a,0)+1);
        }
        for(int i =0;i<s.length();i++){
            if(hs.get(s.charAt(i))==1){
                return i;
            }
        }
        return -1;
    }
}

LeetCode 3. Longest Substring Without Repeating Characters
Solved

Medium

Topics

Companies

Hint
Given a string s, find the length of the longest substring without duplicate characters.
 
Example 1:
Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:
Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:
Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
class Solution {
    public int lengthOfLongestSubstring(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }

        int maxLength = 0;
        int l = 0;
        int r = 0;
        HashSet<Character> hs = new HashSet<>();

        while (r < s.length()) {
            if (!hs.contains(s.charAt(r))) {
                hs.add(s.charAt(r));
                maxLength = Math.max(maxLength, r - l + 1);
                r++;
            } else {
                hs.remove(s.charAt(l));
                l++;
            }
        }

        return maxLength;
    }
}
/////////////////////////////////////////////////////////
Date: 4/03/2025
Leetcode 38
38. Count and Say
Solved

Medium

Topics

Companies

Hint
The count-and-say sequence is a sequence of digit strings defined by the recursive formula:
* countAndSay(1) = "1"
* countAndSay(n) is the run-length encoding of countAndSay(n - 1).
Run-length encoding (RLE) is a string compression method that works by replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). For example, to compress the string "3322251" we replace "33" with "23", replace "222" with "32", replace "5" with "15" and replace "1" with "11". Thus the compressed string becomes "23321511".
Given a positive integer n, return the nth element of the count-and-say sequence.
 
Example 1:
Input: n = 4
Output: "1211"
Explanation:
countAndSay(1) = "1"
countAndSay(2) = RLE of "1" = "11"
countAndSay(3) = RLE of "11" = "21"
countAndSay(4) = RLE of "21" = "1211"
Code 1: 
class Solution {
    public String countAndSay(int n) {
        if(n==1) return "1";
        String lastnum = countAndSay(n-1);
        int index =0;
        StringBuilder sb = new StringBuilder();
        while(index < lastnum.length()){
            char currEle=lastnum.charAt(index);//here current element is saved the character of string 
            index++;

            int freq =1;
            while(index<lastnum.length()){
                if(lastnum.charAt(index) != currEle)break;
                    index++;
                    freq++;
                }
                sb.append(Integer.toString(freq));
                sb.append(currEle);
            
        }

        return sb.toString();
    }
}
1780. Check if Number is a Sum of Powers of Three
Solved

Medium

Topics

Companies

Hint
Given an integer n, return true if it is possible to represent n as the sum of distinct powers of three. Otherwise, return false.
An integer y is a power of three if there exists an integer x such that y == 3x.
 
Example 1:
Input: n = 12
Output: true
Explanation: 12 = 31 + 32
Example 2:
Input: n = 91
Output: true
Explanation: 91 = 30 + 32 + 34

class Solution {
    public boolean checkPowersOfThree(int n) {
         while(n>0){
            if(n%3!=0) {
                n = n - 1;
            }

            if(n%3 != 0) return false;

            n/=3;
        }
        return true;
    }
}

//////////////////////////////////////////////////////////////////////////////////////
Date: 5/03/2025
Leetcode 231
Leetcode 326
Leetcode 342
231. Power of Two
Solved

Easy

Topics

Companies
Given an integer n, return true if it is a power of two. Otherwise, return false.
An integer n is a power of two, if there exists an integer x such that n == 2x.
 
Example 1:
Input: n = 1
Output: true
Explanation: 20 = 1
Example 2:
Input: n = 16
Output: true
Explanation: 24 = 16

class Solution {
    public boolean isPowerOfTwo(int n) {
        if(n<=0){
            return false;
        }
        while(n>0){
            if(n==1){
                return true;
            }
            if(n%2!=0){ 
                return false;
            }
            n=n/2;  
        }
        return true;
    }
}
326. Power of Three
Solved

Easy

Topics

Companies
Given an integer n, return true if it is a power of three. Otherwise, return false.
An integer n is a power of three, if there exists an integer x such that n == 3x.
 
Example 1:
Input: n = 27
Output: true
Explanation: 27 = 33
Example 2:
Input: n = 0
Output: false
Explanation: There is no x where 3x = 0.


class Solution {
    public boolean isPowerOfThree(int n) {
        if(n<=0){
            return false;
        }
        while(n>0){
            if(n==1){
                return true;
            }
            if(n%3 !=0){
                return false;
            }
            n=n/3;
        }
        return true;
    }
}

342. Power of Four
Solved

Easy

Topics

Companies
Given an integer n, return true if it is a power of four. Otherwise, return false.
An integer n is a power of four, if there exists an integer x such that n == 4x.
 
Example 1:
Input: n = 16
Output: true
Example 2:
Input: n = 5
Output: false
Example 3:
Input: n = 1
Output: true

class Solution {
    public boolean isPowerOfFour(int n) {
        if(n<=0){
            return false;
        }
        while(n>0){
            if(n==1){
                return true;
            }
            if(n%4!=0){
                return false;
            }
            n=n/4;
            
        }
        return true;
    }
}

Rabbin Harp
In pattern matching
Description

2579. Count Total Number of Colored Cells
Solved

Medium

Topics

Companies

Hint
There exists an infinitely large two-dimensional grid of uncolored unit cells. You are given a positive integer n, indicating that you must do the following routine for n minutes:
* At the first minute, color any arbitrary unit cell blue.
* Every minute thereafter, color blue every uncolored cell that touches a blue cell.
Below is a pictorial representation of the state of the grid after minutes 1, 2, and 3.
￼
Return the number of colored cells at the end of n minutes.
 
Example 1:
Input: n = 1
Output: 1
Explanation: After 1 minute, there is only 1 blue cell, so we return 1.

class Solution {
    public long coloredCells(int n) {
        long sum=1; // Initial number of colored cells
        for(int i=2; i<=n; i++){
            sum+=(i-1)*4; // Increment by 4 times the previous level
        }
        return sum;
    }
}


