Date : 7/04/2025  (Monday)

leetcode 236,235,230,112,114,109,110,113

//////////////////////////////////////////////////////////
Date: 8/04/2025
Hasmap, dfs,bfs
////////////////////////////////////////////////////////
Date: 9/04/2025

Dfs,bfs code in gfg




BFS Code:-
import java.util.*;

class Solution {
    // Function to return a list containing the BFS traversal of the graph.
    public ArrayList<Integer> bfs(ArrayList<ArrayList<Integer>> adj) {
        HashSet<Integer> visited = new HashSet<>();
        Queue<Integer> queue = new LinkedList<>();
        ArrayList<Integer> result = new ArrayList<>();

        queue.add(0); // Start BFS from node 0
        visited.add(0);

        while (!queue.isEmpty()) {
            int node = queue.poll();
            result.add(node);

            for (int neighbor : adj.get(node)) {
                if (!visited.contains(neighbor)) {
                    queue.add(neighbor);
                    visited.add(neighbor);
                }
            }
        }

        return result;
    }
}


Detect cycle in an undirected graph
https://www.geeksforgeeks.org/detect-cycle-undirected-graph/

Date: 10/04/2025

Priority queue, detect undirected graph is cyclic or not,detect directed graph is cyclic or not.

problems of priority queue and kbit is set or not

Date: 11/04/2025

Leetcode 23 using priority queue
code1: using priority queue and comparable interface.
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public class Pair implements Comparable<Pair>{
        int val;
        ListNode head;

        Pair(int val,ListNode head){
            this.val =val;
            this.head = head;
        }

        @Override //it is fixed because we have overridded
        public int compareTo(Pair p){
            return this.val-p.val;
        }
    }


    public ListNode mergeKLists(ListNode[] lists) {
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        for(int i=0;i<lists.length;i++){
            ListNode head = lists[i];
            while(head != null){
                pq.add(new Pair(head.val,head));
                head =head.next;
            }
        }
        ListNode head = new ListNode(0);
        ListNode tail = head;
        while(pq.size() != 0){
            tail.next = pq.remove().head;
            tail = tail.next;
        }
        tail.next = null;
        return head.next;

    }
}
